import pandas as pd
import numpy as np
import joblib
import xgboost as xgb
import tensorflow as tf
import streamlit as st # Import th∆∞ vi·ªán Streamlit
import os

# ---------------------------------------------------------------------------
# C·∫§U H√åNH TRANG WEB (Streamlit)
# ---------------------------------------------------------------------------
# ƒê·∫∑t ti√™u ƒë·ªÅ v√† layout cho trang web
st.set_page_config(
    page_title="D·ª± b√°o R·ªßi ro Thi√™n tai",
    page_icon="üåä",
    layout="wide"
)

# ---------------------------------------------------------------------------
# T·∫¢I C√ÅC M√î H√åNH V√Ä ƒê·ªêI T∆Ø·ª¢NG (Gi·ªëng h·ªát code Flask)
# ---------------------------------------------------------------------------
# D√πng @st.cache_resource ƒë·ªÉ t·∫£i m√¥ h√¨nh 1 L·∫¶N DUY NH·∫§T
@st.cache_resource
def load_models():
    print("--- ƒêang t·∫£i c√°c m√¥ h√¨nh v√† ƒë·ªëi t∆∞·ª£ng ---")
    MODEL_DIR = "models"
    
    try:
        # T·∫£i m√¥ h√¨nh LSTM
        lstm_model = tf.keras.models.load_model(os.path.join(MODEL_DIR, 'lstm_model.keras'))
        
        # T·∫£i m√¥ h√¨nh XGBoost
        xgb_model = xgb.XGBClassifier()
        xgb_model.load_model(os.path.join(MODEL_DIR, 'xgb_model.json'))
        
        # T·∫£i Scaler (LSTM)
        scaler_lstm = joblib.load(os.path.join(MODEL_DIR, 'scaler_lstm.joblib'))
        
        # T·∫£i Preprocessor (XGB)
        preprocessor_xgb = joblib.load(os.path.join(MODEL_DIR, 'preprocessor_xgb.joblib'))
        
        # T·∫£i Label Encoder (XGB)
        encoder_xgb_label = joblib.load(os.path.join(MODEL_DIR, 'encoder_xgb_label.joblib'))
        
        # T·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ (LSTM)
        ts_data_history_df = joblib.load(os.path.join(MODEL_DIR, 'ts_data_history.joblib'))
        ts_history_values = ts_data_history_df['event_count'].values
        
        # L·∫•y danh s√°ch c√°c V√πng t·ª´ preprocessor ƒë·ªÉ l√†m dropdown
        VUNG_CATEGORIES = list(preprocessor_xgb.categories_[0])
        
        TIME_STEP = 12 # Ph·∫£i gi·ªëng v·ªõi l√∫c hu·∫•n luy·ªán

        print("--- T·∫£i m√¥ h√¨nh th√†nh c√¥ng ---")
        
        return (lstm_model, xgb_model, scaler_lstm, preprocessor_xgb, 
                encoder_xgb_label, ts_history_values, VUNG_CATEGORIES, TIME_STEP)

    except Exception as e:
        print(f"L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ t·∫£i m√¥ h√¨nh. L·ªói: {e}")
        st.error(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")
        return (None,) * 8

# T·∫£i t·∫•t c·∫£ c√°c m√¥ h√¨nh
(lstm_model, xgb_model, scaler_lstm, preprocessor_xgb, 
 encoder_xgb_label, ts_history_values, VUNG_CATEGORIES, TIME_STEP) = load_models()

# ---------------------------------------------------------------------------
# C√ÅC H√ÄM D·ª∞ B√ÅO (Gi·ªëng h·ªát code Flask)
# ---------------------------------------------------------------------------
def predict_frequency_internal():
    try:
        last_sequence = ts_history_values[-TIME_STEP:]
        scaled_input = scaler_lstm.transform(last_sequence.reshape(-1, 1))
        current_input = scaled_input.reshape((1, TIME_STEP, 1))
        predicted_scaled_value = lstm_model.predict(current_input, verbose=0)
        predicted_value = scaler_lstm.inverse_transform(predicted_scaled_value)
        result = max(0, predicted_value[0][0])
        return result
    except Exception as e:
        return f"L·ªói: {e}"

def predict_disaster_type_internal(latitude, longitude, vung, month):
    try:
        input_df = pd.DataFrame({
            'Latitude': [latitude], 'Longitude': [longitude],
            'V√πng': [vung], 'Month': [month]
        })
        processed_input = preprocessor_xgb.transform(input_df)
        prediction_encoded = xgb_model.predict(processed_input)
        prediction_proba = xgb_model.predict_proba(processed_input)
        predicted_label = encoder_xgb_label.inverse_transform(prediction_encoded)[0]
        probability = np.max(prediction_proba) * 100
        return predicted_label, probability
    except Exception as e:
        return f"L·ªói: {e}", 0

# ---------------------------------------------------------------------------
# X√ÇY D·ª∞NG GIAO DI·ªÜN WEB (Streamlit)
# ---------------------------------------------------------------------------
st.title("üåä H·ªá th·ªëng Ph√¢n t√≠ch v√† D·ª± b√°o R·ªßi ro Thi√™n tai")
st.markdown("Nguy√™n m·∫´u Web t√≠ch h·ª£p m√¥ h√¨nh LSTM v√† XGBoost (Deploy b·∫±ng Streamlit)")

st.divider() # K·∫ª v·∫°ch ngang

# --- PH·∫¶N 1: D·ª∞ B√ÅO T·∫¶N SU·∫§T (LSTM) ---
st.header("üìä D·ª± b√°o T·∫ßn su·∫•t (LSTM)")

# Ch·∫°y d·ª± b√°o LSTM
freq_result = predict_frequency_internal()
if isinstance(freq_result, (int, float, np.number)):
    # D√πng st.metric ƒë·ªÉ hi·ªÉn th·ªã con s·ªë
    st.metric(label="D·ª± b√°o t·∫ßn su·∫•t s·ª± ki·ªán trong th√°ng t·ªõi", 
              value=f"{freq_result:.2f} s·ª± ki·ªán")
else:
    st.error(f"L·ªói d·ª± b√°o t·∫ßn su·∫•t: {freq_result}")

st.divider() # K·∫ª v·∫°ch ngang

# --- PH·∫¶N 2: D·ª∞ B√ÅO PH√ÇN LO·∫†I (XGBOOST) ---
st.header("üó∫Ô∏è Ph√¢n lo·∫°i Thi√™n tai (XGBoost)")
st.markdown("Nh·∫≠p c√°c th√¥ng tin d∆∞·ªõi ƒë√¢y ƒë·ªÉ ph√¢n lo·∫°i r·ªßi ro:")

# T·∫°o 2 c·ªôt ƒë·ªÉ layout
col1, col2 = st.columns(2)

with col1:
    lat = st.number_input("Vƒ© ƒë·ªô (Latitude)", 
                         format="%.2f", value=17.48, 
                         help="V√≠ d·ª•: 17.48 cho B·∫Øc Trung B·ªô")
    
    # D√πng st.selectbox cho V√πng
    vung = st.selectbox("Ch·ªçn V√πng", 
                        options=VUNG_CATEGORIES, 
                        index=VUNG_CATEGORIES.index("B·∫Øc Trung B·ªô")) # ƒê·∫∑t gi√° tr·ªã m·∫∑c ƒë·ªãnh

with col2:
    lon = st.number_input("Kinh ƒë·ªô (Longitude)", 
                         format="%.2f", value=106.60, 
                         help="V√≠ d·ª•: 106.60 cho B·∫Øc Trung B·ªô")
    
    month = st.number_input("Th√°ng (1-12)", 
                           min_value=1, max_value=12, value=10)

# N√∫t b·∫•m d·ª± b√°o
if st.button("D·ª± b√°o Ph√¢n lo·∫°i", type="primary"):
    if xgb_model: # Ki·ªÉm tra xem m√¥ h√¨nh ƒë√£ t·∫£i ch∆∞a
        label, proba = predict_disaster_type_internal(lat, lon, vung, month)
        if "L·ªói" in str(label):
            st.error(label)
        else:
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success(f"D·ª± b√°o: **{label}**")
            st.info(f"ƒê·ªô tin c·∫≠y: **{proba:.2f}%**")
    else:
        st.error("M√¥ h√¨nh XGBoost ch∆∞a ƒë∆∞·ª£c t·∫£i. Vui l√≤ng ki·ªÉm tra l·ªói.")